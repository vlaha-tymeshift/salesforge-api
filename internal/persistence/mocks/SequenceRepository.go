// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "salesforge-api/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// SequenceRepository is an autogenerated mock type for the SequenceRepository type
type SequenceRepository struct {
	mock.Mock
}

// AddSequence provides a mock function with given fields: ctx, sequence, steps
func (_m *SequenceRepository) AddSequence(ctx context.Context, sequence *models.Sequence, steps *[]models.Step) (int64, error) {
	ret := _m.Called(ctx, sequence, steps)

	if len(ret) == 0 {
		panic("no return value specified for AddSequence")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Sequence, *[]models.Step) (int64, error)); ok {
		return rf(ctx, sequence, steps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Sequence, *[]models.Step) int64); ok {
		r0 = rf(ctx, sequence, steps)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Sequence, *[]models.Step) error); ok {
		r1 = rf(ctx, sequence, steps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStep provides a mock function with given fields: ctx, delete
func (_m *SequenceRepository) DeleteStep(ctx context.Context, delete *models.DeleteStepRequest) (int64, int64, error) {
	ret := _m.Called(ctx, delete)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStep")
	}

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.DeleteStepRequest) (int64, int64, error)); ok {
		return rf(ctx, delete)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.DeleteStepRequest) int64); ok {
		r0 = rf(ctx, delete)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.DeleteStepRequest) int64); ok {
		r1 = rf(ctx, delete)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.DeleteStepRequest) error); ok {
		r2 = rf(ctx, delete)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateSequence provides a mock function with given fields: ctx, update
func (_m *SequenceRepository) UpdateSequence(ctx context.Context, update *models.UpdateSequenceRequest) (int64, error) {
	ret := _m.Called(ctx, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSequence")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpdateSequenceRequest) (int64, error)); ok {
		return rf(ctx, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpdateSequenceRequest) int64); ok {
		r0 = rf(ctx, update)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UpdateSequenceRequest) error); ok {
		r1 = rf(ctx, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStep provides a mock function with given fields: ctx, update
func (_m *SequenceRepository) UpdateStep(ctx context.Context, update *models.UpdateStepRequest) (int64, int64, error) {
	ret := _m.Called(ctx, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStep")
	}

	var r0 int64
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpdateStepRequest) (int64, int64, error)); ok {
		return rf(ctx, update)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UpdateStepRequest) int64); ok {
		r0 = rf(ctx, update)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UpdateStepRequest) int64); ok {
		r1 = rf(ctx, update)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *models.UpdateStepRequest) error); ok {
		r2 = rf(ctx, update)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewSequenceRepository creates a new instance of SequenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSequenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SequenceRepository {
	mock := &SequenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
